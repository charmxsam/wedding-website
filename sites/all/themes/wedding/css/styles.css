/*******************************************************************************
 * style.scss
 *
 * This file shouldn't directly contain any SCSS code, instead it only serves to
 * combine the SCSS contained in other Sass partials through @import directives.
 *
 * BASE............Styling for common HTML and Drupal elements.
 * LAYOUT..........Styles for the page structure that contain components.
 * COMPONENTS......Components, their modifiers and sub-components.
 ******************************************************************************/
/*******************************************************************************
 * _utils.scss
 *
 * Sass offers come very useful features, these include variables functions and
 * mixins. Extensions such as Compass and Susy can also be used to provide extra
 * functions and mixins to be used throughout the theme. This file acts as a
 * single place for defining these things, which can then be accessed by
 * importing _utils.scss where required. The following should be defined in this
 * file:
 * - Custom Sass mixins for the theme.
 * - Custom Sass functions for the theme.
 * - Overriding the default variables provided by extensions such as Compass.
 * - Defining new variables for:
 *      - Colors.
 *      - Font sizes and families.
 *      - Layout and grid sizing.
 ******************************************************************************/
/*******************************************************************************
 * _base.scss

 * Base styles define the default look for HTML and common Drupal elements.
 *
 * These rules will generally be made up of element selectors for HTML elements
 * such as headings, paragraphs and lists. Common Drupal elements such as form
 * items, collapsible fieldsets and messages should be included in this partial.
 *
 * The styleguide module (http://drupal.org/project/styleguide) gives you a good
 * overview of Drupals common elements for styling. By setting a solid baseline
 * before adding any more specific customisations you ensure that as any new
 * features are added they will be correctly styled without any extra work.
 ******************************************************************************/
/*******************************************************************************
 * _layout.scss
 *
 * The layout of the major regions (usually, but not necessarily Drupal regions)
 * that components will be placed within. Layout styles for the theme's
 * components should not be placed here and should instead be kept with the
 * relevant SCSS for that component.
 ******************************************************************************/
.l-branding {
  width: 50%; }

/*******************************************************************************
 * _components.scss
 *
 * Imports more partials that contain full components (modules in SMACSS), their
 * sub-components and modifiers.
 *
 * Components are discrete parts of your page that should sit within the regions
 * of your layouts. You should try to abstract your components as much as
 * possible to promote reuse throughout the theme. Components should be flexible
 * enough to respond to any width and should never rely on context
 * (e.g. .sidebar-first .component) for styling. This allows modules to be
 * placed throughout the theme with no risk of them breaking.
 *
 * If you find you need to change the look of a component depending on it's
 * context you should avoid using context based classes at all costs. Instead it
 * is better to add another "modifier" class to the component to alter the
 * styling. Again, this promotes reuse.
 *
 * Sub-components are the individual parts that make up a component. As a
 * general rule, adding a class to target a sub-component is a much better
 * option than using descendant selectors or element selectors. In many cases
 * sub-components can be made more reusable by making them components in their
 * own right, so they can then be used within other components.
 *
 * Almost everything that doesn't belong in base should be made a component.
 * Here's some common examples throughout Drupal:
 *
 * - Blocks
 * - Content Types - For example, you may have a generic node component that
 *      contains sub-components for the submitted by line and links. Specific
 *      components can then be created for each content type to style the
 *      specifics of each. Finally, by using entity view modes you can easily
 *      apply modifications based on the .node-[view-mode] classes.
 * - Forms - For instance the log in form.
 * - Views - Each views output style could be made into a component, the content
 *       of each row should be provided my a view mode styled by it's component
 *       CSS. Exposed filter forms, views pagers and other views elements are
 *       also good candidates for components.
 ******************************************************************************/
body {
  margin: 0px;
  background: rgba(252, 250, 242, 0.58);
  margin-top: -43px;
  font-family: 'Josefin Sans'; }

p {
  font-weight: 300;
  font-size: 1.4em; }

h1 {
  font-weight: normal; }

.l-header {
  margin-left: 0px;
  margin-right: 0px;
  width: 100%;
  margin-bottom: 0px;
  padding-left: 0px !important;
  height: 150px !important;
  max-width: 100%; }

.l-branding {
  margin: 0 auto;
  float: none;
  text-align: center;
  width: 100%;
  background: #b13131;
  background-image: url("../images/stars.png");
  background-repeat: no-repeat;
  max-width: 100%;
  height: 100px; }
  .l-branding .site-name {
    padding-top: 20px;
    font-weight: 100;
    font-family: 'neoretrofillregular';
    font-size: 4em; }
    .l-branding .site-name a {
      color: #f0f0f0;
      text-decoration: none; }
    .l-branding .site-name a:hover {
      color: #f0f0f0; }

.l-region--navigation {
  margin-top: 10px; }
  .l-region--navigation #block-system-main-menu ul {
    width: 100%;
    margin: 0 auto;
    text-align: center;
    display: block;
    padding-left: 0px;
    font-family: 'Josefin Sans';
    font-weight: 700;
    font-size: 1.5em; }
  .l-region--navigation #block-system-main-menu li {
    list-style: none;
    display: inline;
    margin-left: 25px; }
  .l-region--navigation #block-system-main-menu a, .l-region--navigation #block-system-main-menu a:visited {
    text-decoration: none;
    color: #3D56B9; }
  .l-region--navigation #block-system-main-menu a:hover {
    text-decoration: underline; }

.l-main {
  width: 80%; }

.field--name-field-content-section {
  font-family: 'neoretrofillregular';
  font-size: 2em; }

.homepage-main .l-main {
  margin-top: 100px; }

.field--name-field-content-section p {
  margin-top: 38px;
  text-align: right;
  padding-right: 50px; }

/* Utilities */
.pull-left {
  float: left;
  display: block; }

.pull-right {
  float: right;
  display: block; }

.home-pic {
  border-radius: 4px; }

@media (max-width: 900px) {
  .l-branding {
    background-image: none; }

  .homepage-main .l-main {
    margin-top: 0px; }
    .homepage-main .l-main .panel-col-first, .homepage-main .l-main .panel-col-last {
      width: 100%;
      float: none; }
    .homepage-main .l-main .field--name-field-content-section p {
      margin-top: 38px;
      text-align: center;
      padding-right: 0px; }
    .homepage-main .l-main .field--name-field-home-image img {
      display: block;
      margin: 0 auto; } }
@media (max-width: 730px) {
  .field--name-field-home-image img {
    width: 95%;
    height: auto; } }
@media (max-width: 598px) {
  .l-branding {
    height: 150px; } }
